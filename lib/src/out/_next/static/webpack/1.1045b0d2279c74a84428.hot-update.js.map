{"version":3,"file":"static/webpack/1.1045b0d2279c74a84428.hot-update.js","sources":["webpack:///./components/App.js"],"sourcesContent":["import React from 'react';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport TimeSeries from 'fusioncharts/fusioncharts.overlappedcolumn2d';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\nimport ReactFC from 'react-fusioncharts/lib/ReactFC';\nimport _ from 'lodash';\nimport io from 'socket.io-client';\nimport parseInput from './parse-input';\nimport Row from './Row';\n\nReactFC.fcRoot(FusionCharts, Charts, TimeSeries, FusionTheme);\nconst colors = [\n    '#5d62b5', '#29c3be', '#f2726f',\n    '#4fb54f', '#c3bf39', '#f26394',\n    '#5d62b5', '#29c3be', '#f2726f',\n    '#4fb54f', '#c3bf39', '#f26394',\n    '#5d62b5', '#29c3be', '#f2726f',\n    '#4fb54f', '#c3bf39', '#f26394',\n    '#5d62b5', '#29c3be', '#f2726f',\n    '#4fb54f', '#c3bf39', '#f26394',\n];\nconst defaultState = {\n    dataSource: {\n        chart: {\n            caption: 'React Native Render Times',\n            subcaption: 'Performance experiments',\n            yaxisname: 'Render time (ms)',\n            drawcrossline: '1',\n            theme: 'fusion',\n            showvalues: '0',\n            'palettecolors': colors.map(c => c.replace('#', '')).join(','),\n        },\n        categories: [\n            { category: [\n\n            ] },\n        ],\n        dataset: [\n        ],\n    },\n};\nexport default class extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ..._.cloneDeep(defaultState),\n            type: 'overlappedcolumn2d',\n        };\n    }\n\n    componentDidMount() {\n        const socket = io.connect('http://localhost:3000');\n        socket.on('data', (fetchedData) => {\n            if (!this.state.paused) {\n                this.addItem(fetchedData);\n            }\n        });\n    }\n\n    addItem = (value = Math.random()) => {\n        if (!this.state.dataSource.dataset.length) {\n            this.addSeries();\n        }\n        if (this.state.dataSource.categories[0].category.length === this.state.dataSource.dataset[this.state.dataSource.dataset.length - 1].data.length) {\n            this.addCategory();\n        }\n        this.state.dataSource.dataset[this.state.dataSource.dataset.length - 1].data.push({\n            value,\n        });\n        const averages = [];\n        _.each(this.state.dataSource.dataset, (dataSet) => {\n            let total = 0;\n            _.each(dataSet.data, (item) => {\n                total += item.value;\n            });\n            averages.push(total / dataSet.data.length);\n        });\n        this.state.dataSource.trendlines = averages.map((v, i) => {\n            return {\n                'line': [{\n                    'color': colors[i],\n                    'thickness': '4',\n                    startValue: v,\n                    'alpha': '50',\n                }],\n            };\n        }).concat([{\n            line: [{\n                'color': '#ff0000',\n                'thickness': '2',\n                startValue: 16.67,\n                'alpha': '100',\n            }],\n        }]);\n        this.forceUpdate();\n    }\n\n    addCategory = () => {\n        this.state.dataSource.categories[0].category.push({\n            label: `Test${this.state.dataSource.categories[0].category.length + 1}`,\n        });\n    }\n\n    addSeries = () => {\n        this.state.dataSource.dataset.push({\n            seriesname: `Variant ${this.state.dataSource.dataset.length + 1}`,\n            data: [],\n        });\n        this.forceUpdate();\n    }\n\n    setVariantName = (i, e) => {\n        this.state.dataSource.dataset[i].seriesname = parseInput(e);\n        this.forceUpdate();\n    }\n\n    clear = () => {\n        this.setState(_.cloneDeep(defaultState));\n    }\n\n    toggle= () => this.setState({ hideMenu: !this.state.hideMenu })\n\n    pauseResume= () => this.setState({ paused: !this.state.paused })\n\n    render() {\n        const datasets = this.state.dataSource.dataset;\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className={`control-panel${this.state.hideMenu ? ' hidden' : ''}`}>\n                        <div style={{ flex: 1 }}>\n                            {datasets && datasets.map((d, i) => (\n                                <Row style={{ justifyContent: 'center' }}>\n                                    <input\n                                      style={{ width: 100 }}\n                                      key={i} onChange={e => this.setVariantName(i, e)} type=\"text\"\n                                      value={d.seriesname}\n                                    />\n                                    <button>\n                                      Delete\n                                    </button>\n                                </Row>\n                            ))}\n                            <div className=\"text-center mt-2\">\n                                <button type=\"button\" className=\"btn btn-primary mr-2\" onClick={this.addSeries}>Add Variant</button>\n                            </div>\n                            <div className=\"text-center mt-2\">\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={this.pauseResume}>\n                                    {this.state.paused ? 'Resume' : 'Pause'}\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"text-center mt-2 mb-2\">\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.clear}>Clear Tests</button>\n                        </div>\n                    </div>\n                    <div className=\"content\">\n                        <div className=\"nav\">\n                            <a onClick={this.toggle}>\n                                <img height={34} src=\"/static/menu.svg\"/>\n                            </a>\n                        </div>\n                        <div className=\"content-inner\">\n                            <ReactFC\n                              type={this.state.type}\n                              width=\"100%\"\n                              height=\"85%\"\n                              dataFormat=\"json\"\n                              dataSource={this.state.dataSource}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AASA;AACA;AAAA;AAIA;AAfA;AADA;AACA;;;;;;AAoBA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AAOA;AACA;AACA;AAtDA;AAwDA;AACA;AADA;AAGA;AACA;AA5DA;AA8DA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AApEA;AAsEA;AACA;AAAA;AACA;AACA;AAzEA;AA2EA;AACA;AACA;AA7EA;AA8EA;AAAA;AAAA;AAAA;AACA;AA/EA;AAgFA;AAAA;AAAA;AAAA;AACA;AA/EA;AAEA;AAFA;AAFA;AAMA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAmEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAFA;AAYA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAYA;;;;AAtIA;AACA;;;;;A","sourceRoot":""}